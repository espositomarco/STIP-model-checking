

MODULE intersection( car0, car1, car2, car3 )

    DEFINE
        num_cars := 4;
        accel := 1;
        decel := 3;
    FROZENVAR

    VAR

    ASSIGN

        
            next(car0.speed) := case
                car0.EXITING : car0.speed;
                car0.speed + accel > car0.max_speed : {car0.speed - decel, car0.speed, car0.max_speed};
                car0.speed - decel < 0 : {0, car0.speed, car0.speed + accel};
                TRUE : {car0.speed - decel, car0.speed, car0.speed + accel};
            esac;
            next(car1.speed) := case
                car1.EXITING : car1.speed;
                car1.speed + accel > car1.max_speed : {car1.speed - decel, car1.speed, car1.max_speed};
                car1.speed - decel < 0 : {0, car1.speed, car1.speed + accel};
                TRUE : {car1.speed - decel, car1.speed, car1.speed + accel};
            esac;
            next(car2.speed) := case
                car2.EXITING : car2.speed;
                car2.speed + accel > car2.max_speed : {car2.speed - decel, car2.speed, car2.max_speed};
                car2.speed - decel < 0 : {0, car2.speed, car2.speed + accel};
                TRUE : {car2.speed - decel, car2.speed, car2.speed + accel};
            esac;
            next(car3.speed) := case
                car3.EXITING : car3.speed;
                car3.speed + accel > car3.max_speed : {car3.speed - decel, car3.speed, car3.max_speed};
                car3.speed - decel < 0 : {0, car3.speed, car3.speed + accel};
                TRUE : {car3.speed - decel, car3.speed, car3.speed + accel};
            esac;


MODULE car(from_in, to_in, speed_in)

    DEFINE
        lanes := 2;
        max_tcl_index := lanes + 2;
        max_position := (lanes * lanes) + 1;
        max_speed := 8;
        max_progress := 100;

        position := tcl[tcl_index];

        APPROACHING := position <= 0;
        CROSSING := position > 0 & position < max_position;
        EXITING := position >= max_position;

    FROZENVAR
        tcl : array 0..max_tcl_index of 0..max_position;
        from : 0..3;--{ TOP, BOTTOM, RIGHT, LEFT};
        to : 0..3;--{ TOP, BOTTOM, RIGHT, LEFT};

    VAR
        tcl_index : 0..max_tcl_index;
        speed : 0..max_speed;
        progress : 0..max_progress;

    ASSIGN
        init(tcl[0]) := 0;
        init(tcl[1]) := case
            from = 2 & to = 2 : 0;
            from = 0 & to = 0 : 0;
            from = 1 & to = 1 : 0;
            from = 3 & to = 3 : 0;
            from = 2 & to = 0 : 4;
            from = 2 & to = 1 : 4;
            from = 2 & to = 3 : 4;
            from = 0 & to = 2 : 1;
            from = 0 & to = 3 : 1;
            from = 0 & to = 1 : 1;
            from = 1 & to = 3 : 2;
            from = 1 & to = 0 : 2;
            from = 1 & to = 2 : 2;
            from = 3 & to = 1 : 3;
            from = 3 & to = 2 : 3;
            from = 3 & to = 0 : 3;
        esac;
        init(tcl[2]) := case
            from = 2 & to = 2 : 0;
            from = 0 & to = 0 : 0;
            from = 1 & to = 1 : 0;
            from = 3 & to = 3 : 0;
            from = 2 & to = 0 : 2;
            from = 2 & to = 1 : 5;
            from = 2 & to = 3 : 2;
            from = 0 & to = 2 : 3;
            from = 0 & to = 3 : 5;
            from = 0 & to = 1 : 3;
            from = 1 & to = 3 : 1;
            from = 1 & to = 0 : 5;
            from = 1 & to = 2 : 1;
            from = 3 & to = 1 : 4;
            from = 3 & to = 2 : 5;
            from = 3 & to = 0 : 4;
        esac;
        init(tcl[3]) := case
            from = 2 & to = 2 : 0;
            from = 0 & to = 0 : 0;
            from = 1 & to = 1 : 0;
            from = 3 & to = 3 : 0;
            from = 2 & to = 0 : 5;
            from = 2 & to = 1 : 5;
            from = 2 & to = 3 : 1;
            from = 0 & to = 2 : 5;
            from = 0 & to = 3 : 5;
            from = 0 & to = 1 : 4;
            from = 1 & to = 3 : 5;
            from = 1 & to = 0 : 5;
            from = 1 & to = 2 : 3;
            from = 3 & to = 1 : 5;
            from = 3 & to = 2 : 5;
            from = 3 & to = 0 : 2;
        esac;
        init(tcl[4]) := case
            from = 2 & to = 2 : 5;
            from = 0 & to = 0 : 5;
            from = 1 & to = 1 : 5;
            from = 3 & to = 3 : 5;
            from = 2 & to = 0 : 5;
            from = 2 & to = 1 : 5;
            from = 2 & to = 3 : 5;
            from = 0 & to = 2 : 5;
            from = 0 & to = 3 : 5;
            from = 0 & to = 1 : 5;
            from = 1 & to = 3 : 5;
            from = 1 & to = 0 : 5;
            from = 1 & to = 2 : 5;
            from = 3 & to = 1 : 5;
            from = 3 & to = 2 : 5;
            from = 3 & to = 0 : 5;
        esac;

        init(tcl_index) := 0;

        init(from) := from_in;
        init(to) := to_in;
        init(speed) := speed_in;
        init(progress) := 0;

        next(progress) := case
            EXITING : progress;
            progress + speed >= max_progress : progress + speed - max_progress;
            progress + speed < max_progress : progress + speed;
        esac;

        next(tcl_index) := case
            tcl_index != max_tcl_index & progress + speed >= max_progress : tcl_index + 1;
            TRUE : tcl_index;
        esac;


MODULE main 
    VAR

        
        	car0 : car( 0, BOTTOM, 8 );
        	car1 : car( 1, LEFT, 8 );
        	car2 : car( 1, BOTTOM, 4 );
        	car3 : car( 3, TOP, 4 );
        
        intersection : intersection( car0, car1, car2, car3 );

    DEFINE
        
            
                car0car1_crash := (car0.CROSSING & car1.CROSSING & car0.position = car1.position );
                car0car2_crash := (car0.CROSSING & car2.CROSSING & car0.position = car2.position );
                car0car3_crash := (car0.CROSSING & car3.CROSSING & car0.position = car3.position );
            
                car1car2_crash := (car1.CROSSING & car2.CROSSING & car1.position = car2.position );
                car1car3_crash := (car1.CROSSING & car3.CROSSING & car1.position = car3.position );
            
                car2car3_crash := (car2.CROSSING & car3.CROSSING & car2.position = car3.position );

        
        cars_exited := car0.EXITING& car1.EXITING& car2.EXITING& car3.EXITING;


    LTLSPEC

        F (
        
             
                car0car1_crash | 
                car0car2_crash | 
                car0car3_crash |
             
                car1car2_crash | 
                car1car3_crash |
             
                car2car3_crash | G !cars_exited)









        


