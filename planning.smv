

MODULE main

    DEFINE
        num_cars := #{num_cars};
        accel := #{acc_param};
        decel := #{acc_param};
    
        #for X in 0..(num_cars-2) {
            #for Y in (X+1)..(num_cars-1) {
                carXcarY_crash := (carX.CROSSING & carY.CROSSING & carX.position = carY.position );
            }
        }

        cars_exited := #list(&) Y in 0..(num_cars-1) { carY.EXITING };

        -- cell cleared
        #for [i] in 1..(lanes+2) {
        	cleared_[i] := #list(&) [j] in 0..num_cars-1 { car[j].position != [i] };
        }

        -- car occupies cell
        #for [i] in 0..num_cars-1{
        	#for CELL in 1..(lanes+2) {
        		car[i]_isIn_CELL := car[i].position = CELL;
        	}
        }


    VAR
    	#for X in 0..(num_cars-1) {
        	carX : car( #{from_dir[X]}, #{to_dir[X]}, #{speed[X]}, #{progress[X]} );
		}


    ASSIGN
        #for [i] in 0..(num_cars-1) {
            next(car[i].speed) := case
                car[i].EXITING : car[i].speed;
                car[i].speed + accel > car[i].max_speed : {car[i].speed - decel, car[i].speed, car[i].max_speed};
                car[i].speed - decel < 0 : {0, car[i].speed, car[i].speed + accel};
                TRUE : {car[i].speed - decel, car[i].speed, car[i].speed + accel};
            esac;
        }


    LTLSPEC
        F (
        #for X in 0..(num_cars-2) {
            #for Y in (X+1)..(num_cars-1) { 
                carXcarY_crash |
            } 
        } FALSE) | G !cars_exited 

        |

        ! G(
        #for CELL in 1..lanes+2 {
        	#for [i] in 0..num_cars-1 {
        		( car[i]_isIn_CELL -> X ( car[i]_isIn_CELL | cleared_CELL ) ) &
        	}
        } TRUE )

        --|
--
        --G (
        --#for [i] in 0..num_cars-1 {
        --	car[i].speed != 0 | 
        --} FALSE
        --)

        

        --#for CELL in 1..lanes+2 {
		--	#for [i] in 0..num_cars-1 {
		--		car[i].position == CELL -> X ( cleared_CELL )
		--	}
--
        --)



MODULE car(from_in, to_in, speed_in, progress_in)

    DEFINE
        lanes := #{lanes};
        max_tcl_index := lanes + 2;
        max_position := (lanes * lanes) + 1;
        max_speed := #{ max_speed };
        max_progress := #{cell_progress};

        position := tcl[tcl_index];

        APPROACHING := position <= 0;
        CROSSING := position > 0 & position < max_position;
        EXITING := position >= max_position;

    FROZENVAR
        tcl : array 0..max_tcl_index of 0..max_position;
        from : 0..3;
        to : 0..3;

    VAR
        tcl_index : 0..max_tcl_index;
        speed : 0..max_speed;
        progress : 0..max_progress;

    ASSIGN
        #if lanes == 2 {
			#{tcl_initialization2x2}
        }

        #if lanes == 4 {
			#{tcl_initialization4x4}
        }

        init(tcl_index) := 0;

        init(from) := from_in;
        init(to) := to_in;
        init(speed) := speed_in;
        init(progress) := progress_in;

        next(progress) := case
            EXITING : progress;
            progress + speed >= max_progress : progress + speed - max_progress;
            progress + speed < max_progress : progress + speed;
        esac;

        next(tcl_index) := case
            tcl_index != max_tcl_index & progress + speed >= max_progress : tcl_index + 1;
            TRUE : tcl_index;
        esac;



        --#list(|) [i] in 1..num_cars-1 {
        --        car[i]car[j]_crash
        --}
    --CTLSPEC

        --(
        --AF ( AG (!cars_exited)  | AF (car1car2_crash) )
        --AF ( !car1car2_crash | AG AF !cars_exited )
        --)
    --FAIRNESS    
        --F (car1.EXITING & car2.EXITING)
        --! car1car2_crash

        --! (EG ( 
        --    !car1car2_crash |
        --    EF (car1.EXITING & car2.EXITING)
        --))

            --(EG (AG cars_exited)))
        --|
        --AF ( car1car2_crash )
        --!EF (car1.EXITING & car2.EXITING)
        --AG ! (car1.EXITING & car2.EXITING)


        --! (EF (AG  (car1.EXITING & car2.EXITING))) -- questo fa uscire le macchine
        --    (AG (EF !(car1.EXITING & car2.EXITING))) -- questo fa uscire le macchine


        --AF ( car1car2_crash | AG ( AG !car1.EXITING  car2.EXITING) )
        --AF ( car1car2_crash ) | 
        -- AG ( !car1.EXITING & !car2.EXITING )

        --(EG !car1car2_crash) & (AF (car1.EXITING & car2.EXITING))
        --(EG !car1car2_crash) & (AF (car1.EXITING & car2.EXITING))
        -- Worth noticing: Planning = !Safety (by De Morgan's law)
        
        -- Planning:
        -- For each possible path, at some point a crash happens. Find me a counterexample.
        --AF (
        --#for X in 1..(num_cars-1) {
        --    #for Y in (X+1)..num_cars { 
        --        carXcarY_crash |
        --    }
        --} FALSE)

        -- Safety:
        -- There exist a possible future in which no crash happens (forever). Check this, without returning the plan.
        --EG (
        --#for X in 1..(num_cars-1) {
        --    #for Y in (X+1)..num_cars { 
        --        !carXcarY_crash &
        --    }
        --} TRUE)

