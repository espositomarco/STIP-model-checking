

MODULE main

    DEFINE
        num_cars := 2;
        accel := 1;
        decel := 1;
    
        
            
                car0car1_crash := (car0.CROSSING & car1.CROSSING & car0.position = car1.position );

        cars_exited :=  car0.EXITING & car1.EXITING ;

        
        	cleared_1 :=  car0.position != 1 & car1.position != 1 ;
        	cleared_2 :=  car0.position != 2 & car1.position != 2 ;
        	cleared_3 :=  car0.position != 3 & car1.position != 3 ;
        	cleared_4 :=  car0.position != 4 & car1.position != 4 ;

        
        	
        		car0_isIn_1 := car0.position = 1;
        		car0_isIn_2 := car0.position = 2;
        		car0_isIn_3 := car0.position = 3;
        		car0_isIn_4 := car0.position = 4;
        	
        		car1_isIn_1 := car1.position = 1;
        		car1_isIn_2 := car1.position = 2;
        		car1_isIn_3 := car1.position = 3;
        		car1_isIn_4 := car1.position = 4;


    VAR
    	
        	car0 : car( 1, 2, 5, 0 );
        	car1 : car( 2, 3, 6, 0 );


    ASSIGN
        
            next(car0.speed) := case
                car0.EXITING : car0.speed;
                car0.speed + accel > car0.max_speed : {car0.speed - decel, car0.speed, car0.max_speed};
                car0.speed - decel < 0 : {0, car0.speed, car0.speed + accel};
                TRUE : {car0.speed - decel, car0.speed, car0.speed + accel};
            esac;
            next(car1.speed) := case
                car1.EXITING : car1.speed;
                car1.speed + accel > car1.max_speed : {car1.speed - decel, car1.speed, car1.max_speed};
                car1.speed - decel < 0 : {0, car1.speed, car1.speed + accel};
                TRUE : {car1.speed - decel, car1.speed, car1.speed + accel};
            esac;


    LTLSPEC
        F (
        
             
                car0car1_crash | FALSE) | G !cars_exited 

        |

        ! G(
        
        	
        		( car0_isIn_1 -> X ( car0_isIn_1 | cleared_1 ) ) &
        		( car1_isIn_1 -> X ( car1_isIn_1 | cleared_1 ) ) &
        	
        		( car0_isIn_2 -> X ( car0_isIn_2 | cleared_2 ) ) &
        		( car1_isIn_2 -> X ( car1_isIn_2 | cleared_2 ) ) &
        	
        		( car0_isIn_3 -> X ( car0_isIn_3 | cleared_3 ) ) &
        		( car1_isIn_3 -> X ( car1_isIn_3 | cleared_3 ) ) &
        	
        		( car0_isIn_4 -> X ( car0_isIn_4 | cleared_4 ) ) &
        		( car1_isIn_4 -> X ( car1_isIn_4 | cleared_4 ) ) & TRUE )


        




MODULE car(from_in, to_in, speed_in, progress_in)

    DEFINE
        lanes := 2;
        max_tcl_index := lanes + 2;
        max_position := (lanes * lanes) + 1;
        max_speed := 8;
        max_progress := 30;

        position := tcl[tcl_index];

        APPROACHING := position <= 0;
        CROSSING := position > 0 & position < max_position;
        EXITING := position >= max_position;

    FROZENVAR
        tcl : array 0..max_tcl_index of 0..max_position;
        from : 0..3;
        to : 0..3;

    VAR
        tcl_index : 0..max_tcl_index;
        speed : 0..max_speed;
        progress : 0..max_progress;

    ASSIGN
        
			init(tcl[0]) := 0;
        init(tcl[1]) := case
            from = 2 & to = 2 : 0;
            from = 0 & to = 0 : 0;
            from = 1 & to = 1 : 0;
            from = 3 & to = 3 : 0;
            from = 2 & to = 0 : 4;
            from = 2 & to = 1 : 4;
            from = 2 & to = 3 : 4;
            from = 0 & to = 2 : 1;
            from = 0 & to = 3 : 1;
            from = 0 & to = 1 : 1;
            from = 1 & to = 3 : 2;
            from = 1 & to = 0 : 2;
            from = 1 & to = 2 : 2;
            from = 3 & to = 1 : 3;
            from = 3 & to = 2 : 3;
            from = 3 & to = 0 : 3;
        esac;
        init(tcl[2]) := case
            from = 2 & to = 2 : 0;
            from = 0 & to = 0 : 0;
            from = 1 & to = 1 : 0;
            from = 3 & to = 3 : 0;
            from = 2 & to = 0 : 2;
            from = 2 & to = 1 : 5;
            from = 2 & to = 3 : 2;
            from = 0 & to = 2 : 3;
            from = 0 & to = 3 : 5;
            from = 0 & to = 1 : 3;
            from = 1 & to = 3 : 1;
            from = 1 & to = 0 : 5;
            from = 1 & to = 2 : 1;
            from = 3 & to = 1 : 4;
            from = 3 & to = 2 : 5;
            from = 3 & to = 0 : 4;
        esac;
        init(tcl[3]) := case
            from = 2 & to = 2 : 0;
            from = 0 & to = 0 : 0;
            from = 1 & to = 1 : 0;
            from = 3 & to = 3 : 0;
            from = 2 & to = 0 : 5;
            from = 2 & to = 1 : 5;
            from = 2 & to = 3 : 1;
            from = 0 & to = 2 : 5;
            from = 0 & to = 3 : 5;
            from = 0 & to = 1 : 4;
            from = 1 & to = 3 : 5;
            from = 1 & to = 0 : 5;
            from = 1 & to = 2 : 3;
            from = 3 & to = 1 : 5;
            from = 3 & to = 2 : 5;
            from = 3 & to = 0 : 2;
        esac;
        init(tcl[4]) := 5;
    

        

        init(tcl_index) := 0;

        init(from) := from_in;
        init(to) := to_in;
        init(speed) := speed_in;
        init(progress) := progress_in;

        next(progress) := case
            EXITING : progress;
            progress + speed >= max_progress : progress + speed - max_progress;
            progress + speed < max_progress : progress + speed;
        esac;

        next(tcl_index) := case
            tcl_index != max_tcl_index & progress + speed >= max_progress : tcl_index + 1;
            TRUE : tcl_index;
        esac;











        


