MODULE car(id_in, from_in, to_in, speed_in, distance_from_intersection_in)
	DEFINE
		-- size of the edge of each cell (meters)
		cell_size := 5;

		-- simulation step length (seconds)
		--dt := 0.1;

		-- number of lanes
		L := 2;

		-- max length of a tcl -1 (trailing -1 is needed because array indexes start with 0)
		len := (L + 1) - 1;

		-- simulation steps in a second
		steps_per_second := 10;

		-- max cell progress
		max_progress := 100;
		
		-- max speed (cell/max_progress per simulation step) (14 m/s ~ 50 km/h)
		max_speed := (max_progress * 14) / (cell_size * steps_per_second);
		
		-- total number of cars
		cars_count := 100;

		-- max distance from intersection expressed in (cell length in meters)/max_progress
		max_distance_from_intersection := max_progress;

	
	FROZENVAR
	-- forzenvars don't change in time
		
		-- car id. Used to compute priority.
		id : 0..cars_count;

		-- trajectory cell list (list of vec2)
		tcl : array 0..len of 0..(L*L); -- 0 is out of intersection
		
		-- list of time of arrival for each cell in tcl
		-- tcl_time : array 0..len of array 0..1 of 0..L;

		from : {BOTTOM, TOP, LEFT, RIGHT};
		to:    {BOTTOM, TOP, LEFT, RIGHT};

		distance_from_intersection : 0..max_distance_from_intersection;
	
	VAR
		-- current position in the intersection grid
		position : 0..(L*L); -- 0 is out of intersection

		-- current speed in tenth of meters per second
		speed : 0..max_speed;
		
		-- fraction of cell traveled. Reals are not allowed.
		cell_progress : 0..max_progress;
		
		-- index pointing at current position in tcl
		tcl_index : 0..len;



	ASSIGN
		-- INITIALIZATIONS --
		init(id) := id_in;
		init(from) := from_in;
		--init(to) := to_in;
		init(to) := case
			from = BOTTOM : {TOP, LEFT, RIGHT};
			from = TOP : {BOTTOM, LEFT, RIGHT};
			from = LEFT : {BOTTOM, TOP, RIGHT};
			from = RIGHT : {BOTTOM, TOP, LEFT};
		esac;
		
		-- using a Python script to generate tcl initialization (it's parametric)
		init(tcl[0]) := case
			from = BOTTOM & to = BOTTOM : 0;
			from = TOP & to = TOP : 0;
			from = RIGHT & to = RIGHT : 0;
			from = LEFT & to = LEFT : 0;
			from = BOTTOM & to = TOP : 4;
			from = BOTTOM & to = RIGHT : 4;
			from = BOTTOM & to = LEFT : 4;
			from = TOP & to = BOTTOM : 1;
			from = TOP & to = LEFT : 1;
			from = TOP & to = RIGHT : 1;
			from = RIGHT & to = LEFT : 2;
			from = RIGHT & to = TOP : 2;
			from = RIGHT & to = BOTTOM : 2;
			from = LEFT & to = RIGHT : 3;
			from = LEFT & to = BOTTOM : 3;
			from = LEFT & to = TOP : 3;
		esac;
		init(tcl[1]) := case
			from = BOTTOM & to = BOTTOM : 0;
			from = TOP & to = TOP : 0;
			from = RIGHT & to = RIGHT : 0;
			from = LEFT & to = LEFT : 0;
			from = BOTTOM & to = TOP : 2;
			from = BOTTOM & to = RIGHT : 0;
			from = BOTTOM & to = LEFT : 2;
			from = TOP & to = BOTTOM : 3;
			from = TOP & to = LEFT : 0;
			from = TOP & to = RIGHT : 3;
			from = RIGHT & to = LEFT : 1;
			from = RIGHT & to = TOP : 0;
			from = RIGHT & to = BOTTOM : 1;
			from = LEFT & to = RIGHT : 4;
			from = LEFT & to = BOTTOM : 0;
			from = LEFT & to = TOP : 4;
		esac;
		init(tcl[2]) := case
			from = BOTTOM & to = BOTTOM : 0;
			from = TOP & to = TOP : 0;
			from = RIGHT & to = RIGHT : 0;
			from = LEFT & to = LEFT : 0;
			from = BOTTOM & to = TOP : 0;
			from = BOTTOM & to = RIGHT : 0;
			from = BOTTOM & to = LEFT : 1;
			from = TOP & to = BOTTOM : 0;
			from = TOP & to = LEFT : 0;
			from = TOP & to = RIGHT : 4;
			from = RIGHT & to = LEFT : 0;
			from = RIGHT & to = TOP : 0;
			from = RIGHT & to = BOTTOM : 3;
			from = LEFT & to = RIGHT : 0;
			from = LEFT & to = BOTTOM : 0;
			from = LEFT & to = TOP : 2;
		esac;

		init(position) := tcl[0];
		init(speed) := speed_in;

		init(tcl_index) := 0;
		init(cell_progress) := 0;

		-- also tcl_time should be initialized with a script
		-- init(tcl_time) := get_initial_tcl_time(from, to, speed); -- pseudocode



		-- SIMULATION --
		next(speed) := speed;
		next(tcl_index) := case
			cell_progress + speed >  max_progress: min(tcl_index + 1, len);
			cell_progress + speed <= max_progress: tcl_index;
		esac;
		
		next(cell_progress) := case
			cell_progress + speed >  max_progress : min(cell_progress + speed  - max_progress, max_progress);
			cell_progress + speed <= max_progress : min(cell_progress + speed, max_progress);
		esac;

		next(position) := tcl[tcl_index];


MODULE main
	VAR
		c1 : car(1, BOTTOM, TOP, 7, 0);
		c2 : car(2, RIGHT, LEFT, 21, 0);
	SPEC
		AG (c1.position != 0 & c2.position != 0 -> c1.position != c2.position) 



