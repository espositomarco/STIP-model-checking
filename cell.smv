MODULE intersection(car1, car2)
    DEFINE
        -- number of cars
        num_cars := 2;

        -- size of the edge of each cell (meters)
        cell_size := 5;

        -- simulation step length (seconds)
        --dt := 0.1;

        -- number of lanes
        L := 2;

        -- simulation steps in a second
        steps_per_second := 10;
        
        -- max speed (cell/max_progress per simulation step) (14 m/s ~ 50 km/h)
        --max_speed := (max_progress * 14) / (cell_size * steps_per_second);
        max_speed := 20;

        max_time := 10;

    VAR
        time : 0..max_time;

    ASSIGN
        init(time) := 0;
        next(time) := case
            time = max_time : time;
            TRUE : time + 1;
        esac;

        #for Index in 1..2 {
            next(carIndex.speed) := case
                carIndex.speed <= 3 : {1, 2, 3};
                TRUE : {carIndex.speed - 3, carIndex.speed};
            esac;
        }



MODULE main
    VAR

        car1 : car(1, BOTTOM, TOP, 15, INTERSECTION);
        car2 : car(2, LEFT, RIGHT, 28, INTERSECTION);
        --car3 : car(3, TOP, BOTTOM, 1, INTERSECTION);
        INTERSECTION : intersection(car1, car2);

    SPEC


         ( AF 
            -- INTERSECTION.time = INTERSECTION.max_time |
            -- qualcuno va a sbatte.
            (
            ( car1.INSIDE & car2.INSIDE & car1.position = car2.position ) 
            --( car1.INSIDE & car3.INSIDE & car1.position = car3.position ) |
            --( car3.INSIDE & car2.INSIDE & car3.position = car2.position )
            )
         )










------------   CAR  -------------
MODULE car(id_in, from_in, to_in, speed_in, cell_in)
    DEFINE
        -- size of the edge of each cell (meters)
        cell_size := 5;

        -- simulation step length (seconds)
        --dt := 0.1;

        -- number of lanes
        L := 2;

        -- position when exited
        max_position := (L * L) + 1;

        -- max length of a tcl -1 (trailing -1 is needed because array indexes start with 0)
        len := L + 2; -- TODO: Not general!

        -- simulation steps in a second
        steps_per_second := 10;

        -- max cell progress
        max_cell_progress := 100;

        
        -- max speed (cell/max_progress per simulation step) (14 m/s ~ 50 km/h)
        max_speed := (max_progress * 14) / (cell_size * steps_per_second);
        
        -- total number of cars
        N := 100;

        -- max distance from intersection expressed in (cell length in meters)/max_progress
        dist_from_intersection := 100;

        -- max progress in cell or outside intersection
        max_progress := max(max_cell_progress, dist_from_intersection);

        position := tcl[tcl_index];
        APPROACHING := position = 0;
        EXITED      := position = max_position;
        --INSIDE      := !EXITED & !APPROACHING; --position != 0;
        INSIDE := position > 0 & position < max_position;

    FROZENVAR
    -- forzenvars don't change in time
        
        -- car id. Used to compute priority.
        id : 0..N;

        -- trajectory cell list (list of vec2). len+1 because the car starts at 0 (outside intersection)
        tcl : array 0..len of 0..max_position; -- 0 is out of intersection
        
        -- list of time of arrival for each cell in tcl
        -- tcl_time : array 0..len of array 0..1 of 0..L;

        from : {BOTTOM, TOP, LEFT, RIGHT};
        to:    {BOTTOM, TOP, LEFT, RIGHT};
    
    VAR
        -- current speed in tenth of meters per second
        speed : 0..max_speed;
        
        -- fraction of cell traveled. Reals are not allowed.
        cell_progress : 0..max_progress;
        
        -- index pointing at current position in tcl
        tcl_index : 0..len;



    ASSIGN
        -- INITIALIZATIONS --
        init(id) := id_in;
        init(from) := from_in;
        init(to) := to_in;
        --init(to) := case
        --    from = BOTTOM : {TOP, LEFT, RIGHT};
        --    from = TOP : {BOTTOM, LEFT, RIGHT};
        --    from = LEFT : {BOTTOM, TOP, RIGHT};
        --    from = RIGHT : {BOTTOM, TOP, LEFT};
        --esac;
        
        #insert_string { tcl_initialization2x2 }


        init(tcl_index) := 0;

        init(speed) := speed_in;

        init(cell_progress) := 0;

        -- also tcl_time should be initialized with a script
        -- init(tcl_time) := get_initial_tcl_time(from, to, speed); -- pseudocode



        -- SIMULATION --
        next(tcl_index) := case
            EXITED : tcl_index;
            APPROACHING & (cell_progress + speed >  dist_from_intersection) : min(len, tcl_index + 1);
            APPROACHING & (cell_progress + speed <=  dist_from_intersection) : tcl_index;
            INSIDE & (cell_progress + speed >  max_progress) : min(len, tcl_index + 1);
            INSIDE & (cell_progress + speed <= max_progress) : tcl_index;
        esac;


        
        next(cell_progress) := case
            EXITED : cell_progress;

            APPROACHING & cell_progress + speed >  dist_from_intersection : min(cell_progress + speed  - dist_from_intersection, dist_from_intersection);
            APPROACHING & cell_progress + speed <= dist_from_intersection : min(cell_progress + speed, dist_from_intersection);            
            INSIDE & cell_progress + speed >  max_progress : min(cell_progress + speed  - max_progress, max_progress);
            INSIDE & cell_progress + speed <= max_progress : min(cell_progress + speed, max_progress);
        esac;
